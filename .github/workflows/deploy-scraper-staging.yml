# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy Service to Amazon ECS

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SUPERSTACK_SERVICE_TOKEN:
        required: true
      PIP_INDEX_URL:
        required: true
      KUBE_CONFIG_STAGING:
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout Service
        uses: actions/checkout@v2
        with:
          repository: superstack-dev/superstack-runner
          ref: staging
          token: ${{ secrets.SUPERSTACK_SERVICE_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: "scraper/package"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/scraper
          file: ${{ github.workspace }}/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.service_name }}-staging:${{ github.sha }}
          build-args: |
            PIP_INDEX_URL=${{ secrets.PIP_INDEX_URL }}
            PIP_ARGS=--pre

      - name: deploy to cluster
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.service_name }}-staging
          IMAGE_TAG: ${{ github.sha }}
          DP_NAME: ${{ inputs.service_name }}
        with:
          args: set image deployment/$DP_NAME $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: verify deployment
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
          DP_NAME: ${{ inputs.service_name }}
        with:
          args: rollout status deployment/$DP_NAME
