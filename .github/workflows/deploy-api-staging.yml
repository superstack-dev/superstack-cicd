name: Deploy API

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      namespace:
        required: false
        default: default
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      KUBE_CONFIG:
        required: true
      JF_ARTIFACTORY_SECRET:
        required: true
      SUPERSTACK_DOCKER_REGISTRY:
        required: true

jobs:
  deploy:
    name: Deploy Staging
    runs-on: ubuntu-latest
    environment: staging
    env:
      IMAGE_NAME: ${{ inputs.service_name }}-staging
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JFrog
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET }}

      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: ${{ secrets.SUPERSTACK_DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }},${{ secrets.SUPERSTACK_DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Image
        env:
          SUPERSTACK_DOCKER_REGISTRY: ${{ secrets.SUPERSTACK_DOCKER_REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: jfrog rt dp $SUPERSTACK_DOCKER_REGISTRY/$IMAGE_NAME:latest superstack-docker

      - name: Deploy To Cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
          DP_NAME: ${{ inputs.service_name }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: rollout restart deployment/$DP_NAME --namespace=${{ inputs.namespace }}

      - name: Verify Deployment
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
          DP_NAME: ${{ inputs.service_name }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: rollout status deployment/$DP_NAME --namespace=${{ inputs.namespace }}
