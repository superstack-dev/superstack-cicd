on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      lambda_function_name:
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: 'Dockerfile'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      PIP_INDEX_URL:
        required: true

name: Deploy to AWS Lambda from ECR

jobs:
  deploy:
    name: Deploy To ${{ inputs.env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      IMAGE_NAME: ${{ inputs.ecr_repository }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ecr repo if it does not exist
        id: create-ecr-repo-if-not-exists
        run: |
          aws ecr create-repository --repository-name $IMAGE_NAME && aws ecr put-lifecycle-policy \
            --repository-name $IMAGE_NAME \
            --lifecycle-policy-text '{"rules":[{"rulePriority":1,"description":"remove images when count of 10 is surpassed","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":10},"action":{"type":"expire"}}]}' || true

      - name: Build, tag and push image to ECR
        id: build-image
        uses: docker/build-push-action@v2
        with:
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            PIP_EXTRA_INDEX_URL=${{ secrets.PIP_INDEX_URL }}

      - name: Deploy lambda function with new ECR image
        id: update-lambda-function
        run: |
          aws lambda update-function-code --function-name ${{ inputs.lambda_function_name }} --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
