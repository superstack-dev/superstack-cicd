name: Deploy Function

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      lambda_function_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      PIP_INDEX_URL:
        required: true

jobs:
  deploy:
    name: Deploy To ${{ inputs.env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      IMAGE_NAME: ${{ inputs.ecr_repository }}
      IMAGE_TAG: ${{ github.sha }}
      BUILDER_IMAGE_NAME: service-base-lambda

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Builder Image
        env:
          SUPERSTACK_DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker pull $SUPERSTACK_DOCKER_REGISTRY/$BUILDER_IMAGE_NAME:latest

      - name: Build
        id: build_image
        uses: redhat-actions/s2i-build@v2
        with:
          path_context: "."
          builder_image: ${{ steps.login-ecr.outputs.registry }}/${{ env.BUILDER_IMAGE_NAME }}:latest
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
          log_level: 5
          tags: ${{ env.IMAGE_TAG }} latest
          env_vars: |
            PIP_EXTRA_INDEX_URL=${{ secrets.PIP_INDEX_URL }}
            SERVICE_BASE_FUNCTION_NAME_ENV_NAME=SUPERSTACK_FUNCTION_NAME

      - name: Create ecr repo if it does not exist
        id: create-ecr-repo-if-not-exists
        run: |
          aws ecr create-repository --repository-name $IMAGE_NAME && aws ecr put-lifecycle-policy \
            --repository-name $IMAGE_NAME \
            --lifecycle-policy-text '{"rules":[{"rulePriority":1,"description":"remove images when count of 10 is surpassed","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":10},"action":{"type":"expire"}}]}' || true

      - name: Push Image to Amazon ECR
        id: push-to-ecr
        env:
          SUPERSTACK_DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $SUPERSTACK_DOCKER_REGISTRY/$IMAGE_NAME:latest
          docker push $SUPERSTACK_DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          echo "::set-output name=image::$SUPERSTACK_DOCKER_REGISTRY/$IMAGE_NAME:latest"

      - name: Deploy lambda function with new ECR image
        id: update-lambda-function
        run: |
          aws lambda update-function-code --function-name ${{ inputs.lambda_function_name }} --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
